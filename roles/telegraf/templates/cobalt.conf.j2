# {{ ansible_managed }}

[[inputs.redis]]
  ## specify servers via a url matching:
  ##  [protocol://][:password]@address[:port]
  ##  e.g.
  ##    tcp://localhost:6379
  ##    tcp://:password@192.168.99.100
  ##    unix:///var/run/redis.sock
  ##
  ## If no servers are specified, then localhost is used as the host.
  ## If no port is specified, 6379 is used
  servers = ["tcp://localhost:6379"]

# Query given DNS server and gives statistics
[[inputs.dns_query]]
  ## servers to query
  servers = ["8.8.8.8", "208.67.222.222", "192.168.1.53"] # required

  ## Domains or subdomains to query. "."(root) is default
  domains = ["{{ telegraf_dns_domain }}"] # optional

  ## Query record type. Default is "A"
  ## Posible values: A, AAAA, CNAME, MX, NS, PTR, TXT, SOA, SPF, SRV.
  record_type = "A" # optional

  ## Dns server port. 53 is default
  port = 53 # optional

  ## Query timeout in seconds. Default is 2 seconds
  timeout = 2 # optional


# Read metrics about docker containers
[[inputs.docker]]
  ## Docker Endpoint
  ##   To use TCP, set endpoint = "tcp://[ip]:[port]"
  ##   To use environment variables (ie, docker-machine), set endpoint = "ENV"
  endpoint = "unix:///var/run/docker.sock"
  ## Only collect metrics for these containers, collect all if empty
  container_names = []
  ## Timeout for docker list, info, and stats commands
  timeout = "5s"

  ## Whether to report for each container per-device blkio (8:0, 8:1...) and
  ## network (eth0, eth1, ...) stats or not
  perdevice = true
  ## Whether to report for each container total blkio and network stats or not
  total = false

# Read metrics from one or more commands that can output to stdout
[[inputs.exec]]
  ## Commands array
  commands = [
    "ruby {{ telegraf_scripts_path }}/plex.rb",
    "ruby {{ telegraf_scripts_path }}/drives.rb",
    "ruby {{ telegraf_scripts_path }}/switch.rb",
    "ruby {{ telegraf_scripts_path }}/ups.rb"
  ]

  ## Timeout for each command to complete.
  timeout = "15s"

  ## measurement name suffix (for separating different commands)
  name_suffix = ""

  ## Data format to consume.
  ## Each data format has it's own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "influx"

# Read metrics about network interface usage
[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback)
  ## Setting interfaces will tell it to gather these explicit interfaces,
  ## regardless of status.
  ##
  # interfaces = ["eno1,eno2,eno3,eno4,idrac"]

# Read Nginx's basic status information (ngx_http_stub_status_module)
[[inputs.nginx]]
  ## An array of Nginx stub_status URI to gather stats.
  urls = ["http://localhost/nginx_stub_status"]


# Ping given url(s) and return statistics
[[inputs.ping]]
  ## NOTE: this plugin forks the ping command. You may need to set capabilities
  ## via setcap cap_net_raw+p /bin/ping
  #
  ## urls to ping
  urls = ["{{ ansible_default_ipv4.gateway }}", "8.8.8.8"] # required
  ## number of pings to send per collection (ping -c <COUNT>)
  count = 1 # required
  ## interval, in s, at which to ping. 0 == default (ping -i <PING_INTERVAL>)
  ping_interval = 0.0
  ## per-ping timeout, in s. 0 == no timeout (ping -W <TIMEOUT>)
  timeout = 1.0
  ## interface to send ping from (ping -I <INTERFACE>)
  interface = ""

# Retrieves SNMP values from remote agents
[[inputs.snmp]]
  agents = [ "192.168.1.110" ]
  timeout = "5s"
  version = 2

  # SNMPv1 & SNMPv2 parameters
  community = "public"

  # SNMPv2 & SNMPv3 parameters
  max_repetitions = 50

  # SNMPv3 parameters
  #sec_name = "myuser"
  #auth_protocol = "md5"         # Values: "MD5", "SHA", ""
  #auth_password = "password123"
  #sec_level = "authNoPriv"      # Values: "noAuthNoPriv", "authNoPriv", "authPriv"
  #context_name = ""
  #priv_protocol = ""            # Values: "DES", "AES", ""
  #priv_password = ""

  # measurement name
  name = "ups"
  [[inputs.snmp.field]]
    name = "totalkwh"
    oid = ".1.3.6.1.4.1.318.1.1.1.4.3.6.0"
  [[inputs.snmp.field]]
    name = "volts"
    oid = ".1.3.6.1.4.1.318.1.1.1.4.3.4.0"
  [[inputs.snmp.field]]
    name = "amps"
    oid = ".1.3.6.1.4.1.318.1.1.1.4.3.1.0"
#  [[inputs.snmp.field]]
#    name = "uptime"
#    oid = ".1.0.0.1.2"
#  [[inputs.snmp.field]]
#    name = "load"
#    oid = ".1.0.0.1.3"
#  [[inputs.snmp.field]]
#    oid = "HOST-RESOURCES-MIB::hrMemorySize"

#  [[inputs.snmp.table]]
#    # measurement name
#    name = "remote_servers"
#    inherit_tags = [ "hostname" ]
#    [[inputs.snmp.table.field]]
#      name = "server"
#      oid = ".1.0.0.0.1.0"
#      is_tag = true
#    [[inputs.snmp.table.field]]
#      name = "connections"
#      oid = ".1.0.0.0.1.1"
#    [[inputs.snmp.table.field]]
#      name = "latency"
#      oid = ".1.0.0.0.1.2"
#
#  [[inputs.snmp.table]]
#    # auto populate table's fields using the MIB
#    oid = "HOST-RESOURCES-MIB::hrNetworkTable"

# Monitor sensors, requires lm-sensors package
[[inputs.sensors]]
  ## Remove numbers from field names.
  ## If true, a field name like 'temp1_input' will be changed to 'temp_input'.
  # remove_numbers = true

[[inputs.ipmi_sensor]]
  ## specify servers via a url matching:
  ##  [username[:password]@][protocol[(address)]]
  ##  e.g.
  ##    root:passwd@lan(127.0.0.1)
  ##
  servers = ["{{ telegraf_ipmi_user }}:{{ telegraf_ipmi_password }}@lanplus(192.168.1.101)"]

